{"version":3,"sources":["Learning/Components/Header/Header.js","Learning/Components/Cart/Cart.js","Learning/Components/Basket/Basket.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","React","Component","Cart","props","state","title","onClick","this","clearCart","selectedItems","map","item","name","handleDelete","id","Basket","listOfItems","addToBasket","bind","fetch","then","response","json","data","setState","index","concat","updatedArray","filter","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAGaA,G,MAAb,YAEI,aAAc,uEAFlB,sEAOQ,OAEQ,yBAAKC,UAAY,gBACX,yBAAKC,IAAM,oBAVjC,GAA4BC,IAAMC,Y,OCArBC,G,MAAb,YAEI,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,GAFC,EAFtB,sEAUa,IAAD,OACJ,OAEQ,yBAAKN,UAAY,mBACb,oCACA,6BACA,yBAAKA,UAAY,cACb,yBAAKC,IAAM,gBAAgBM,MAAM,aAAaC,QAAWC,KAAKJ,MAAMK,YACpE,+CAEJ,4BACSD,KAAKJ,MAAMM,cAAcC,KAAI,SAAAC,GAAI,OAAI,4BAAKA,EAAKC,KAAV,IAAgB,yBAAKb,IAAI,aAAaM,MAAM,SAASC,QAAW,kBAAM,EAAKH,MAAMU,aAAaF,EAAKG,iBArBrK,GAA0Bd,IAAMC,YCCnBc,G,MAAb,YAEI,aAAc,IAAD,8BACT,+CACKX,MAAQ,CACTY,YAAY,GACZP,cAAc,IAGlB,EAAKQ,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKV,UAAY,EAAKA,UAAUU,KAAf,gBACjB,EAAKL,aAAe,EAAKA,aAAaK,KAAlB,gBATX,EAFjB,iFAcyB,IAAD,OAChBC,MAAM,aACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACH,EAAKC,SAAS,CACXR,YAAaO,SAnB5B,kCAwBgBE,GACRlB,KAAKiB,SAAS,CACVf,cAAgBF,KAAKH,MAAMK,cAAciB,OAAOnB,KAAKH,MAAMY,YAAYS,QA1BnF,kCA+BQlB,KAAKiB,SAAS,CACVf,cAAc,OAhC1B,mCAoCiBK,GACT,IAAMa,EAAepB,KAAKH,MAAMK,cAAcmB,QAAO,SAAAjB,GAC7C,OAAOA,EAAKG,IAAMA,KAE1Be,QAAQC,IAAIH,GAEZpB,KAAKiB,SAAS,CACVf,cAAekB,MA3C3B,+BA+Ca,IAAD,OACJ,OAEQ,yBAAK7B,UAAY,aACX,yBAAKA,UAAY,kBACb,2CACA,6BACA,4BACGS,KAAKH,MAAMY,YAAYN,KAAI,SAACC,EAAKc,GAAN,OAAgB,wBAAKpB,MAAM,uBAAuBC,QAAW,kBAAM,EAAKW,YAAYQ,KAASd,EAAKC,WAGpI,kBAAC,EAAD,CAAMH,cAAiBF,KAAKH,MAAMK,cAAeD,UAAaD,KAAKC,UAAWK,aAAgBN,KAAKM,oBA1DzH,GAA4Bb,IAAMC,YCCrB8B,G,MAAb,iLAGI,OACE,yBAAKjC,UAAY,gBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,WANV,GAAyBE,IAAMC,YCOX+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.f2435f0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nexport class Header extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            \r\n                <div className = \"myapp-header\">\r\n                      <img src = \"basket.png\" />  \r\n                </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './Cart.css';\r\n\r\nexport class Cart extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            \r\n                <div className = \"right-container\">\r\n                    <h1>Cart</h1>\r\n                    <hr /> \r\n                    <div className = \"clear-cart\">\r\n                        <img src = \"clearcart.png\" title=\"Clear Cart\" onClick = {this.props.clearCart} />\r\n                        <span> Clear Cart </span>\r\n                    </div>\r\n                    <ul>   \r\n                            {this.props.selectedItems.map(item => <li>{item.name} <img src=\"delete.png\" title=\"Remove\" onClick = {() => this.props.handleDelete(item.id)}/></li>)}      \r\n                    </ul>\r\n                </div>  \r\n                \r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { Cart } from '../Cart/Cart';\r\nimport './Basket.css';\r\n\r\nexport class Basket extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            listOfItems:[],\r\n            selectedItems:[],\r\n        }\r\n\r\n        this.addToBasket = this.addToBasket.bind(this);\r\n        this.clearCart = this.clearCart.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('list.json')\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            this.setState({\r\n               listOfItems: data,\r\n            })\r\n        })\r\n    }\r\n\r\n    addToBasket(index){\r\n        this.setState({\r\n            selectedItems : this.state.selectedItems.concat(this.state.listOfItems[index]),\r\n        })\r\n    }\r\n\r\n    clearCart(){\r\n        this.setState({\r\n            selectedItems:[],\r\n        })\r\n    }\r\n\r\n    handleDelete(id){\r\n        const updatedArray = this.state.selectedItems.filter(item => {\r\n                return item.id != id;\r\n        } )\r\n        console.log(updatedArray);\r\n\r\n        this.setState({\r\n            selectedItems: updatedArray,\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            \r\n                <div className = \"container\">\r\n                      <div className = \"left-container\">\r\n                          <h1> Groceries </h1>\r\n                          <hr /> \r\n                          <ul>   \r\n                            {this.state.listOfItems.map((item,index) => <li  title=\"Click to Add to Cart\" onClick = {() => this.addToBasket(index)}>{item.name}</li>)}      \r\n                          </ul>\r\n                      </div>\r\n                      <Cart selectedItems = {this.state.selectedItems} clearCart = {this.clearCart} handleDelete = {this.handleDelete}/>\r\n                </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\nimport { Header } from './Learning/Components/Header/Header';\nimport { Basket } from './Learning/Components/Basket/Basket';\nimport './App.css';\n\nexport class App extends React.Component {\n\n  render(){\n    return (\n      <div className = \"myapp-parent\">\n          <Header />\n          <Basket />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}